# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openmoc_mic', [dirname(__file__)])
        except ImportError:
            import _openmoc_mic
            return _openmoc_mic
        if fp is not None:
            try:
                _mod = imp.load_module('_openmoc_mic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openmoc_mic = swig_import_helper()
    del swig_import_helper
else:
    import _openmoc_mic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def machineContainsMIC():
  return _openmoc_mic.machineContainsMIC()
machineContainsMIC = _openmoc_mic.machineContainsMIC

def getNumMICDevices():
  return _openmoc_mic.getNumMICDevices()
getNumMICDevices = _openmoc_mic.getNumMICDevices
FOUR_PI = _openmoc_mic.FOUR_PI
ONE_OVER_FOUR_PI = _openmoc_mic.ONE_OVER_FOUR_PI
class MICSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICSolver, name)
    __repr__ = _swig_repr
    def __init__(self, geom = None, track_generator = None, num_threads = 1): 
        this = _openmoc_mic.new_MICSolver(geom, track_generator, num_threads)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_mic.delete_MICSolver
    __del__ = lambda self : None;
    def getGeometry(self): return _openmoc_mic.MICSolver_getGeometry(self)
    def getTrackGenerator(self): return _openmoc_mic.MICSolver_getTrackGenerator(self)
    def getNumThreads(self): return _openmoc_mic.MICSolver_getNumThreads(self)
    def getNumPolarAngles(self): return _openmoc_mic.MICSolver_getNumPolarAngles(self)
    def getPolarQuadratureType(self): return _openmoc_mic.MICSolver_getPolarQuadratureType(self)
    def getNumIterations(self): return _openmoc_mic.MICSolver_getNumIterations(self)
    def getSourceConvergenceThreshold(self): return _openmoc_mic.MICSolver_getSourceConvergenceThreshold(self)
    def getFluxConvergenceThreshold(self): return _openmoc_mic.MICSolver_getFluxConvergenceThreshold(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_mic.MICSolver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_mic.MICSolver_getFSRScalarFluxes(self)
    def getFSRPowers(self): return _openmoc_mic.MICSolver_getFSRPowers(self)
    def getFSRPinPowers(self): return _openmoc_mic.MICSolver_getFSRPinPowers(self)
    def setNumThreads(self, *args, **kwargs): return _openmoc_mic.MICSolver_setNumThreads(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_mic.MICSolver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_mic.MICSolver_setTrackGenerator(self, *args, **kwargs)
    def setPolarQuadratureType(self, *args, **kwargs): return _openmoc_mic.MICSolver_setPolarQuadratureType(self, *args, **kwargs)
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc_mic.MICSolver_setNumPolarAngles(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc_mic.MICSolver_setSourceConvergenceThreshold(self, *args, **kwargs)
    def setFluxConvergenceThreshold(self, *args, **kwargs): return _openmoc_mic.MICSolver_setFluxConvergenceThreshold(self, *args, **kwargs)
    def convergeSource(self, *args, **kwargs): return _openmoc_mic.MICSolver_convergeSource(self, *args, **kwargs)
    def computePinPowers(self): return _openmoc_mic.MICSolver_computePinPowers(self)
MICSolver_swigregister = _openmoc_mic.MICSolver_swigregister
MICSolver_swigregister(MICSolver)



